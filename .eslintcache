[{"/home/fil/projects/JavaScript/test-form/src/App.js":"1","/home/fil/projects/JavaScript/test-form/src/index.js":"2","/home/fil/projects/JavaScript/test-form/src/components/Form.js":"3","/home/fil/projects/JavaScript/test-form/src/reportWebVitals.js":"4"},{"size":149,"mtime":1612039996727,"results":"5","hashOfConfig":"6"},{"size":524,"mtime":1612119676906,"results":"7","hashOfConfig":"6"},{"size":5777,"mtime":1612208346821,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1612038447578,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"16mishh",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fil/projects/JavaScript/test-form/src/App.js",[],["21","22"],"/home/fil/projects/JavaScript/test-form/src/index.js",[],["23","24"],"/home/fil/projects/JavaScript/test-form/src/components/Form.js",["25","26","27","28","29","30"],"import React, { useEffect, useState } from 'react'\n\n\nexport function Form ({props}){\n\nconst [name, setName]=useState('')\nconst [email, setEmail]=useState('')\nconst [phone, setPhone]=useState('')\nconst [nameDirty, setNameDirty]=useState(false)\nconst [emailDirty, setEmailDirty]=useState(false)\nconst [phoneDirty, setPhoneDirty]=useState(false)\nconst [nameError, setNameError]=useState('Поле Имя не может быть пустым')\nconst [emailError, setEmailError]=useState('Поле Email не может быть пустым')\nconst [phoneError, setPhoneError]=useState('Поле телефон не может быть пустым')\nconst [formValid, setFormValid]=useState(false)\nconst [checkbox, setCheckbox]=useState(false)\n\n\n\nuseEffect(()=>{\n    if(nameError||emailError||phoneError||!checkbox){\n        setFormValid(false)\n    }else {setFormValid(true)}\n},)\n\n\nconst nameHandler = (e) => {\n    setName(e.target.value)\n    const re = RegExp(/^[a-zа-я]{3,15}$/)\n    if(!re.test(String(e.target.value).toLowerCase()))\n     {\n         setNameError('Имя не должно содержать цифр и быть не меньше 2-х букв')\n     } else {setNameError('')}\n    }\n\nconst emailHandler = (e) => {\n    setEmail(e.target.value)\n    const re = RegExp(/^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/)\n    if(!re.test(String(e.target.value).toLowerCase()))\n     {\n         setEmailError('Некорректный  Email')\n     } else {setEmailError('')}\n}\n\nconst phoneHandler = (e) => {\n    setPhone(e.target.value)\n    const re = RegExp(/^\\+?[78][-\\(]?\\d{3}\\)?-?\\d{3}-?\\d{2}-?\\d{2}$/)\n    if(!re.test(String(e.target.value).toLowerCase()))\n     {\n         setPhoneError('Некорректный  номер')\n     } else {setPhoneError('')}\n}\n\nconst checkboxHandler = (e)=>{\n    if (checkbox===false){ \n        setCheckbox(true)\n    } else {setCheckbox(false)}\n    \n}\n\nconst blurHandler = (e) => {\n    switch (e.target.name){\n        case 'name':\n            setNameDirty(true)\n            break;\n        case 'email':\n            setEmailDirty(true)\n            break;\n        case 'phone':\n            setPhoneDirty(true)\n            break;\n    }\n}\n\n\n    return (\n        <div className=\"form-body\">\n            <h2>Регистрация</h2>\n            <div>\n                <div className=\"have-account\">Уже есть аккаунт? <a href=\"#\">Войти</a> </div>\n            </div>\n            <form className=\"form\" >\n                <div className=\"form-group name\">\n                    <label htmlFor='name'>Имя</label>\n                    <input type='text'\n                           id='Name'\n                           className='form-control'\n                           value= {name}\n                           name='name'\n                           // onChange={this.changeInputHandler}\n                        placeholder='Введите Ваше Имя'\n                        onBlur = {e=>blurHandler(e)}\n                        onChange = {e=> nameHandler(e)}\n                    />\n                    {(nameDirty && nameError) && <div className=\"error\" style={{color:'red'}}>{nameError}</div>}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor='email'>Email</label>\n                    <input type='text'\n                           id='email'\n                           className='form-control'\n                           value= {email}\n                           name='email'\n                        // onChange={this.changeInputHandler}\n                           placeholder='Введите Ваш Email'\n                           onBlur = {e=>blurHandler(e)}\n                           onChange= {e => emailHandler(e)}\n                    />\n                    {(emailDirty && emailError) && <div className=\"error\" style={{color:'red'}}>{emailError}</div>}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor='phone'>Номер телефона</label>\n                    <input type='text'\n                           id='phone'\n                           className='form-control'\n                           value= {phone}\n                           name='phone'\n                        // onChange={this.changeInputHandler}\n                           placeholder='Введите Ваш Номер'\n                           onBlur = {e=>blurHandler(e)}\n                           onChange = {e=>phoneHandler(e)}\n                    />\n                    {(phoneDirty && phoneError) && <div className=\"error\" style={{color:'red'}}>{phoneError}</div>}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor='language'>Язык</label>\n                    <select className='language' name=\"language\" id=\"language\" placeholder='Выберите язык' >\n                        <option value=\"Russian\">Русский</option>\n                        <option value=\"English\">Английский</option>\n                        <option value=\"Chinese\">Китайский</option>\n                        <option value=\"Spanish\">Испанский</option>\n                    </select>\n                </div>\n                <div className='checkbox-block'>\n                    <input className=\"checkbox\" type=\"checkbox\" checked={checkbox} onChange={e=>checkboxHandler(e)}/>\n                    <div className=\"checkbox-text\">\n                        Принимаю <a href=\"#\">условия</a> использования\n                    </div>\n\n                </div>\n                \n                <button className='btn' disabled={!formValid} type='submit' >Зарегистрироваться</button>\n            </form>\n        </div>\n    )\n}","/home/fil/projects/JavaScript/test-form/src/reportWebVitals.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"31","replacedBy":"35"},{"ruleId":"33","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":20,"column":1,"nodeType":"39","endLine":20,"endColumn":10,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":38,"column":30,"nodeType":"43","messageId":"44","endLine":38,"endColumn":31,"suggestions":"45"},{"ruleId":"41","severity":1,"message":"46","line":47,"column":34,"nodeType":"43","messageId":"44","endLine":47,"endColumn":35,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":62,"column":5,"nodeType":"50","messageId":"51","endLine":72,"endColumn":6},{"ruleId":"52","severity":1,"message":"53","line":80,"column":65,"nodeType":"54","endLine":80,"endColumn":77},{"ruleId":"52","severity":1,"message":"53","line":137,"column":34,"nodeType":"54","endLine":137,"endColumn":46},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],["55"],["56"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setFormValid'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [nameError, emailError, phoneError, checkbox] as a second argument to the useEffect Hook.","Identifier",["57"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["58","59"],"Unnecessary escape character: \\(.",["60","61"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"messageId":"64","fix":"65","desc":"66"},{"messageId":"67","fix":"68","desc":"69"},{"messageId":"64","fix":"70","desc":"66"},{"messageId":"67","fix":"71","desc":"69"},"Add dependencies array: [nameError, emailError, phoneError, checkbox]",{"range":"72","text":"73"},"removeEscape",{"range":"74","text":"75"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"76","text":"77"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"78","text":"75"},{"range":"79","text":"77"},[802,802],", [nameError, emailError, phoneError, checkbox]",[1174,1175],"",[1174,1174],"\\",[1441,1442],[1441,1441]]